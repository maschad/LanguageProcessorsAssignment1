package hpl.lang;


import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/* Preliminaries to set up and use the scanner.  */
action code {:          :};

parser code {:
		HPLLexer lexer;

		public HPLParser(HPLLexer l) {
                    super(l);
                    lexer = l;
                }

		public HPLParser(String file) throws FileNotFoundException {
	            this(new HPLLexer(new FileReader(file)));
		}

                public HPLParser(InputStream is) {
                    this(new HPLLexer(is));
                }

		public void report_error(String message, Object info) {
		    System.err.println(message + info);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error while reading: ", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
		// No longer necessary		
	  :};
scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  :};

/* Terminals (tokens returned by the scanner). */

/* Keywords */
terminal DEF_PAINTER, PAINT, ASSIGN;
terminal IMG_PAINTER, FRAME, SUBFRAME;
terminal LET, WAIT;

/* Arithmetic operators */ 
terminal PLUS, MINUS, TIMES, DIV, MOD, POW;
/* Punctuation */
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, SEMI, COMMA, COLON, IN, END;


terminal Integer INTEGER;
terminal Double FRACTION;
terminal Double REAL;
terminal String VAR;
terminal String STRING;

/* Non terminals */
non terminal PIRProgram program;
non terminal PIRSequence stmtList;
non terminal PIRStatement stmt;
non terminal PIRStatement waitStmt;
non terminal PIRPaintStmt paintStmt;

non terminal PIRFrameExp frameExp;

non terminal ASTExp<PIRExp> painterExp;
non terminal PIRFunCall funCall;
non terminal ASTExp<PIRExp> primitiveExp;

/* *** Logic extensions (in support of IF) *** */
terminal String CMP;
// place your extensions here, if you do this problem

/* *** End of logic extensions *** */

non terminal ASTExp<AIRExp> arithExp;
non terminal ASTExp<AIRExp> arithTerm;
non terminal ASTExp<AIRExp> arithConstFactor;
non terminal ASTExp<AIRExp> arithFactor;

non terminal ArrayList<ASTExp<AIRExp>> aExpList;   /* non-empty arith exp list */
non terminal ArrayList<ASTExp<AIRExp>> aExpListE;  /* potentially empty arith exp list */
non terminal ArrayList<ASTExp<PIRExp>> pExpList;   /* non-empty painter exp list */
non terminal ArrayList<ASTExp<PIRExp>> pExpListE;  /* potentially empty painter exp list */

non terminal ArrayList<String> paramList;
non terminal ArrayList<String> paramListE;
non terminal empty;


/* Fill in the rest of your non terminal declarations here */
non terminal PIRFunctionDef funcDefn;


/* Grammar rules */

start with program;

program ::= stmtList:seq {:
		RESULT = new PIRProgram(seq);
	    :};

stmtList ::= stmtList:seq stmt:s {:
		  seq.addStatement(s);
		  RESULT = seq; :} |
	     empty {:
		  RESULT = new PIRSequence(); :};

stmt ::=   VAR:id ASSIGN painterExp:e {: RESULT = new PIRAssignment(id, e); :} |
           paintStmt: s {: RESULT = s; :} |
           waitStmt: s {: RESULT = s; :} | 
           funcDefn: s {: RESULT = s; :};

paintStmt ::= PAINT:paint painterExp:e {:
	RESULT =  new PIRPaintStmt(e);
:} |
PAINT:paint painterExp:e IN frameExp:f {: 
		RESULT = new  PIRPaintStmt(e,f);:};
            /* Finish this */

/* 
   ** You will need to implement function definition **
*/
funcDefn ::= DEF_PAINTER:def VAR:name LBRACKET paramListE:lst 
RBRACKET LPAREN paramList:pList RPAREN COLON stmtList:body END{:
		RESULT= new PIRFunctionDef(name,lst,body,pList);
		:};

frameExp ::= FRAME LPAREN LPAREN arithExp:e1 COMMA arithExp:e2 RPAREN  COMMA LPAREN arithExp:e3 COMMA arithExp:e4 RPAREN COMMA LPAREN arithExp:e5 COMMA arithExp:e6 RPAREN RPAREN{: 
	        RESULT = new PIRFrameExp(e1,e2,e3,e4,e5,e6); 
		:} | SUBFRAME LPAREN LPAREN arithExp:e1 COMMA arithExp:e2 RPAREN COMMA arithExp:e3 COMMA arithExp:e4 RPAREN{:
			RESULT = new PIRFrameExp(e1,e2,e3,new AIRExpInt(0), new AIRExpInt(0), e4); 
		:};

waitStmt ::= WAIT arithExp:t {: RESULT = new PIRWaitStmt(t); :};

painterExp ::=  primitiveExp: primExp {: RESULT = primExp; :} |
	        VAR:v {: RESULT = new ASTVar<PIRExp>(v); :} |
	        LPAREN painterExp:e RPAREN {: RESULT = e; :} | 
	        funCall:s {: RESULT = s; :}; 

primitiveExp ::= IMG_PAINTER LPAREN STRING:file RPAREN {: 
                         RESULT = new PIRImagePainter(file); 
                     :};

/*
	// Implement funCall production rule(s)
*/
funCall ::= VAR:name LBRACKET aExpListE:e RBRACKET LPAREN pExpList:args RPAREN{:
					RESULT = new PIRFunCall(name,e,args);
				:};

paramListE ::= paramList:lst {: RESULT = lst; :} |
	       empty {: RESULT = new ArrayList<>();:};

paramList ::= paramList:lst COMMA VAR:id {:
		lst.add(id);
		RESULT = lst; :} |
	      VAR:id {:
				RESULT = new ArrayList<>();
				RESULT.add(id);
			:};

aExpList ::= aExpList:lst COMMA arithExp:e {:
	         	lst.add(e);
	  			RESULT = lst;
	     	:} |
	    	 arithExp:e {:
		  		RESULT = new ArrayList<>();
		  		RESULT.add(e);
	     		:};

aExpListE ::= aExpList:lst {: RESULT = lst; :} |
	      empty {: RESULT = new ArrayList<>();:};

/* 
   ** You will also need separate rules for a list of painter expressions **
*/

pExpList ::= pExpList:lst COMMA painterExp:e {:
			lst.add(e);
			RESULT= lst; 
		:}| painterExp:e {:
			RESULT =  new ArrayList<>();
			RESULT.add(e);
		:};

pExpListE ::= pExpListE:lst {: RESULT = lst; :} |
				empty{: RESULT = new ArrayList<>(); :};

arithExp ::= arithExp:e PLUS arithTerm:t {: RESULT = new ASTBinaryExp<AIRExp>("+", e, t); :} |
	     arithExp:e MINUS arithTerm:t {: RESULT = new ASTBinaryExp<AIRExp>("-", e, t); :} |
	     arithTerm:t {: RESULT = t; :};

arithTerm ::= arithTerm:t TIMES arithFactor:f {: RESULT = new ASTBinaryExp<AIRExp>("*", t, f); :}|
	      arithTerm:t DIV arithFactor:f {: RESULT = new ASTBinaryExp<AIRExp>("/", t, f); :}|
	      arithTerm:t MOD arithFactor:f {: RESULT = new ASTBinaryExp<AIRExp>("%", t, f); :}|
	      arithFactor:f {: RESULT = f; :};

arithConstFactor ::= INTEGER:ilit {: RESULT = new AIRExpInt(ilit); :} |
		     FRACTION:frac {: RESULT = new AIRExpFrac(frac); :} |
		     LPAREN arithExp:e RPAREN {: RESULT = e; :};

arithFactor ::= arithConstFactor:cf {: RESULT = cf; :} |
		VAR:var {: RESULT = new ASTVar(var); :} |
                MINUS arithFactor:f {: 
		      RESULT = new ASTUnaryExp<AIRExp>("-", f); 
		:};

empty ::= ;
