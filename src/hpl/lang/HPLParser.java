
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package hpl.lang;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class HPLParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public HPLParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public HPLParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public HPLParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\003" +
    "\000\002\004\003\000\002\006\004\000\002\006\006\000" +
    "\002\026\015\000\002\026\015\000\002\007\026\000\002" +
    "\007\016\000\002\005\004\000\002\010\003\000\002\010" +
    "\003\000\002\010\005\000\002\012\006\000\002\011\011" +
    "\000\002\024\003\000\002\024\003\000\002\023\005\000" +
    "\002\023\003\000\002\017\005\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\005\000\002\021" +
    "\003\000\002\022\003\000\002\022\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\005\000\002\016" +
    "\003\000\002\016\003\000\002\016\004\000\002\025\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\012\002\uffd5\005\uffd5\013\uffd5\036\uffd5\001" +
    "\002\000\004\002\121\001\002\000\012\002\ufffe\005\ufffe" +
    "\013\ufffe\036\ufffe\001\002\000\012\002\000\005\014\013" +
    "\011\036\007\001\002\000\004\006\117\001\002\000\012" +
    "\002\ufffb\005\ufffb\013\ufffb\036\ufffb\001\002\000\014\015" +
    "\035\022\045\033\037\034\036\036\042\001\002\000\012" +
    "\002\ufffc\005\ufffc\013\ufffc\036\ufffc\001\002\000\012\002" +
    "\uffff\005\uffff\013\uffff\036\uffff\001\002\000\010\007\021" +
    "\022\020\036\015\001\002\000\016\002\ufff2\005\ufff2\013" +
    "\ufff2\023\ufff2\031\ufff2\036\ufff2\001\002\000\014\002\ufffa" +
    "\005\ufffa\013\ufffa\031\027\036\ufffa\001\002\000\016\002" +
    "\ufff3\005\ufff3\013\ufff3\023\ufff3\031\ufff3\036\ufff3\001\002" +
    "\000\010\007\021\022\020\036\015\001\002\000\004\022" +
    "\022\001\002\000\004\037\023\001\002\000\004\023\024" +
    "\001\002\000\016\002\ufff0\005\ufff0\013\ufff0\023\ufff0\031" +
    "\ufff0\036\ufff0\001\002\000\004\023\026\001\002\000\016" +
    "\002\ufff1\005\ufff1\013\ufff1\023\ufff1\031\ufff1\036\ufff1\001" +
    "\002\000\006\010\031\011\032\001\002\000\012\002\ufff9" +
    "\005\ufff9\013\ufff9\036\ufff9\001\002\000\004\022\073\001" +
    "\002\000\004\022\033\001\002\000\004\022\034\001\002" +
    "\000\014\015\035\022\045\033\037\034\036\036\042\001" +
    "\002\000\014\015\035\022\045\033\037\034\036\036\042" +
    "\001\002\000\030\002\uffda\005\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\023\uffda\027\uffda\036\uffda" +
    "\001\002\000\030\002\uffdb\005\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\023\uffdb\027\uffdb\036\uffdb" +
    "\001\002\000\030\002\uffd8\005\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\023\uffd8\027\uffd8\036\uffd8" +
    "\001\002\000\030\002\uffdc\005\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\023\uffdc\027\uffdc\036\uffdc" +
    "\001\002\000\030\002\uffd7\005\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\023\uffd7\027\uffd7\036\uffd7" +
    "\001\002\000\030\002\uffe0\005\uffe0\013\uffe0\014\uffe0\015" +
    "\uffe0\016\055\017\054\020\053\023\uffe0\027\uffe0\036\uffe0" +
    "\001\002\000\010\014\050\015\051\027\062\001\002\000" +
    "\014\015\035\022\045\033\037\034\036\036\042\001\002" +
    "\000\010\014\050\015\051\023\047\001\002\000\030\002" +
    "\uffd9\005\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\023\uffd9\027\uffd9\036\uffd9\001\002\000\014\015" +
    "\035\022\045\033\037\034\036\036\042\001\002\000\014" +
    "\015\035\022\045\033\037\034\036\036\042\001\002\000" +
    "\030\002\uffe1\005\uffe1\013\uffe1\014\uffe1\015\uffe1\016\055" +
    "\017\054\020\053\023\uffe1\027\uffe1\036\uffe1\001\002\000" +
    "\014\015\035\022\045\033\037\034\036\036\042\001\002" +
    "\000\014\015\035\022\045\033\037\034\036\036\042\001" +
    "\002\000\014\015\035\022\045\033\037\034\036\036\042" +
    "\001\002\000\030\002\uffdf\005\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\023\uffdf\027\uffdf\036\uffdf" +
    "\001\002\000\030\002\uffde\005\uffde\013\uffde\014\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\023\uffde\027\uffde\036\uffde" +
    "\001\002\000\030\002\uffdd\005\uffdd\013\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd\027\uffdd\036\uffdd" +
    "\001\002\000\030\002\uffe2\005\uffe2\013\uffe2\014\uffe2\015" +
    "\uffe2\016\055\017\054\020\053\023\uffe2\027\uffe2\036\uffe2" +
    "\001\002\000\014\015\035\022\045\033\037\034\036\036" +
    "\042\001\002\000\010\014\050\015\051\023\064\001\002" +
    "\000\004\027\065\001\002\000\014\015\035\022\045\033" +
    "\037\034\036\036\042\001\002\000\010\014\050\015\051" +
    "\027\067\001\002\000\014\015\035\022\045\033\037\034" +
    "\036\036\042\001\002\000\010\014\050\015\051\023\071" +
    "\001\002\000\012\002\ufff5\005\ufff5\013\ufff5\036\ufff5\001" +
    "\002\000\030\002\uffd6\005\uffd6\013\uffd6\014\uffd6\015\uffd6" +
    "\016\uffd6\017\uffd6\020\uffd6\023\uffd6\027\uffd6\036\uffd6\001" +
    "\002\000\004\022\074\001\002\000\014\015\035\022\045" +
    "\033\037\034\036\036\042\001\002\000\010\014\050\015" +
    "\051\027\076\001\002\000\014\015\035\022\045\033\037" +
    "\034\036\036\042\001\002\000\010\014\050\015\051\023" +
    "\100\001\002\000\004\027\101\001\002\000\004\022\102" +
    "\001\002\000\014\015\035\022\045\033\037\034\036\036" +
    "\042\001\002\000\010\014\050\015\051\027\104\001\002" +
    "\000\014\015\035\022\045\033\037\034\036\036\042\001" +
    "\002\000\010\014\050\015\051\023\106\001\002\000\004" +
    "\027\107\001\002\000\004\022\110\001\002\000\014\015" +
    "\035\022\045\033\037\034\036\036\042\001\002\000\010" +
    "\014\050\015\051\027\112\001\002\000\014\015\035\022" +
    "\045\033\037\034\036\036\042\001\002\000\010\014\050" +
    "\015\051\023\114\001\002\000\004\023\115\001\002\000" +
    "\012\002\ufff6\005\ufff6\013\ufff6\036\ufff6\001\002\000\016" +
    "\002\ufff4\005\ufff4\013\ufff4\014\050\015\051\036\ufff4\001" +
    "\002\000\010\007\021\022\020\036\015\001\002\000\012" +
    "\002\ufffd\005\ufffd\013\ufffd\036\ufffd\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\010\002\003\003\005\025\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\004\012\005\007" +
    "\006\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\013\115\014\042\015\037\016\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\015\012\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\024\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\043\014\042\015\037\016\040\001" +
    "\001\000\006\015\037\016\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\045\014\042\015\037\016\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\060\015\037\016\040" +
    "\001\001\000\010\014\051\015\037\016\040\001\001\000" +
    "\002\001\001\000\006\015\037\016\057\001\001\000\006" +
    "\015\037\016\056\001\001\000\006\015\037\016\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\062\014\042\015\037\016" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\065\014\042\015\037\016\040\001\001\000\002\001" +
    "\001\000\012\013\067\014\042\015\037\016\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\074\014\042\015\037\016\040" +
    "\001\001\000\002\001\001\000\012\013\076\014\042\015" +
    "\037\016\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\013\102\014\042\015\037\016" +
    "\040\001\001\000\002\001\001\000\012\013\104\014\042" +
    "\015\037\016\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\110\014\042\015\037" +
    "\016\040\001\001\000\002\001\001\000\012\013\112\014" +
    "\042\015\037\016\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\117\012\016\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$HPLParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$HPLParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$HPLParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		// No longer necessary		
	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
		    System.out.println ("Unrecognised token at line: " + 
                                lexer.getLine() + ", char: " + lexer.getChar());
		    System.out.println(ioe.getMessage());
		    throw ioe;
		}
	  
    }


		HPLLexer lexer;

		public HPLParser(HPLLexer l) {
                    super(l);
                    lexer = l;
                }

		public HPLParser(String file) throws FileNotFoundException {
	            this(new HPLLexer(new FileReader(file)));
		}

                public HPLParser(InputStream is) {
                    this(new HPLLexer(is));
                }

		public void report_error(String message, Object info) {
		    System.err.println(message + info);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error while reading: ", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$HPLParser$actions {

          
  private final HPLParser parser;

  /** Constructor */
  CUP$HPLParser$actions(HPLParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$HPLParser$do_action_part00000000(
    int                        CUP$HPLParser$act_num,
    java_cup.runtime.lr_parser CUP$HPLParser$parser,
    java.util.Stack            CUP$HPLParser$stack,
    int                        CUP$HPLParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$HPLParser$result;

      /* select the action based on the action number */
      switch (CUP$HPLParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		PIRProgram start_val = (PIRProgram)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		RESULT = start_val;
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$HPLParser$parser.done_parsing();
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= stmtList 
            {
              PIRProgram RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRSequence seq = (PIRSequence)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
		RESULT = new PIRProgram(seq);
	    
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              PIRSequence RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		PIRSequence seq = (PIRSequence)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRStatement s = (PIRStatement)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
		  seq.addStatement(s);
		  RESULT = seq; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= empty 
            {
              PIRSequence RESULT =null;
		
		  RESULT = new PIRSequence(); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= VAR ASSIGN painterExp 
            {
              PIRStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new PIRAssignment(id, e); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= paintStmt 
            {
              PIRStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRPaintStmt s = (PIRPaintStmt)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= waitStmt 
            {
              PIRStatement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRStatement s = (PIRStatement)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = s; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // paintStmt ::= PAINT painterExp 
            {
              PIRPaintStmt RESULT =null;
		int paintleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int paintright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		Object paint = (Object)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
	RESULT =  new PIRPaintStmt(e);

              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paintStmt",4, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // paintStmt ::= PAINT painterExp IN frameExp 
            {
              PIRPaintStmt RESULT =null;
		int paintleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).left;
		int paintright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).right;
		Object paint = (Object)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		PIRFrameExp f = (PIRFrameExp)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 
		RESULT = new  PIRPaintStmt(e,f); 
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paintStmt",4, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcDefn ::= DEF_PAINTER VAR LBRACKET paramList RBRACKET LPAREN paramList RPAREN COLON stmtList END 
            {
              PIRFunctionDef RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-9)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-7)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-7)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-7)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).right;
		ArrayList<String> pList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		PIRSequence body = (PIRSequence)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		
		RESULT= new PIRFunctionDef(name,lst,body,pList);
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("funcDefn",20, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcDefn ::= DEF_PAINTER VAR LBRACKET paramListE RBRACKET LPAREN paramList RPAREN COLON stmtList END 
            {
              PIRFunctionDef RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).left;
		int defright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-9)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-9)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-7)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-7)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-7)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).right;
		ArrayList<String> pList = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		PIRSequence body = (PIRSequence)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		
		RESULT= new PIRFunctionDef(name,lst,body,pList);
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("funcDefn",20, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // frameExp ::= FRAME LPAREN LPAREN arithExp COMMA arithExp RPAREN COMMA LPAREN arithExp COMMA arithExp RPAREN COMMA LPAREN arithExp COMMA arithExp RPAREN RPAREN 
            {
              PIRFrameExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-16)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-16)).right;
		ASTExp<AIRExp> e1 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-16)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-14)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-14)).right;
		ASTExp<AIRExp> e2 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-14)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).right;
		ASTExp<AIRExp> e3 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-10)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).right;
		ASTExp<AIRExp> e4 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).right;
		ASTExp<AIRExp> e5 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).value;
		int e6left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> e6 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		 
	        RESULT = new PIRFrameExp(e1,e2,e3,e4,e5,e6); 
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("frameExp",5, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-19)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // frameExp ::= SUBFRAME LPAREN LPAREN arithExp COMMA arithExp RPAREN COMMA arithExp COMMA arithExp RPAREN 
            {
              PIRFrameExp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).right;
		ASTExp<AIRExp> e1 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).right;
		ASTExp<AIRExp> e2 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).right;
		ASTExp<AIRExp> e3 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		ASTExp<AIRExp> e4 = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		
			RESULT = new PIRFrameExp(e1,e2,e3,new AIRExpInt(0), new AIRExpInt(0), e4); 
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("frameExp",5, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-11)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // waitStmt ::= WAIT arithExp 
            {
              PIRStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new PIRWaitStmt(t); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("waitStmt",3, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // painterExp ::= primitiveExp 
            {
              ASTExp<PIRExp> RESULT =null;
		int primExpleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int primExpright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<PIRExp> primExp = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = primExp; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("painterExp",6, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // painterExp ::= VAR 
            {
              ASTExp<PIRExp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTVar<PIRExp>(v); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("painterExp",6, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // painterExp ::= LPAREN painterExp RPAREN 
            {
              ASTExp<PIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 RESULT = e; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("painterExp",6, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // primitiveExp ::= IMG_PAINTER LPAREN STRING RPAREN 
            {
              ASTExp<PIRExp> RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 
                         RESULT = new PIRImagePainter(file); 
                     
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("primitiveExp",8, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-3)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funCall ::= VAR LBRACKET aExpList RBRACKET LPAREN pExpListE RPAREN 
            {
              PIRFunCall RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).right;
		ArrayList<ASTExp<AIRExp>> e = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		ArrayList<ASTExp<PIRExp>> args = (ArrayList<ASTExp<PIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		
					RESULT = new PIRFunCall(name,e,args);
				
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("funCall",7, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-6)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",18, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>();
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paramListE",18, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramList ::= paramList COMMA VAR 
            {
              ArrayList<String> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ArrayList<String> lst = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
		lst.add(id);
		RESULT = lst; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paramList",17, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramList ::= VAR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
				RESULT = new ArrayList<>();
				RESULT.add(id);
			
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("paramList",17, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // aExpList ::= aExpList COMMA arithExp 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ArrayList<ASTExp<AIRExp>> lst = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
	         	lst.add(e);
	  			RESULT = lst;
	     	
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",13, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // aExpList ::= arithExp 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
		  		RESULT = new ArrayList<>();
		  		RESULT.add(e);
	     		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("aExpList",13, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // aExpListE ::= aExpList 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ArrayList<ASTExp<AIRExp>> lst = (ArrayList<ASTExp<AIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",14, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // aExpListE ::= empty 
            {
              ArrayList<ASTExp<AIRExp>> RESULT =null;
		 RESULT = new ArrayList<>();
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("aExpListE",14, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // pExpList ::= pExpList COMMA painterExp 
            {
              ArrayList<ASTExp<PIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ArrayList<ASTExp<PIRExp>> lst = (ArrayList<ASTExp<PIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
			lst.add(e);
			RESULT= lst; 
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("pExpList",15, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // pExpList ::= painterExp 
            {
              ArrayList<ASTExp<PIRExp>> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<PIRExp> e = (ASTExp<PIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		
			RESULT =  new ArrayList<>();
			RESULT.add(e);
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("pExpList",15, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // pExpListE ::= pExpListE 
            {
              ArrayList<ASTExp<PIRExp>> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ArrayList<ASTExp<PIRExp>> lst = (ArrayList<ASTExp<PIRExp>>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("pExpListE",16, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // pExpListE ::= empty 
            {
              ArrayList<ASTExp<PIRExp>> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("pExpListE",16, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // arithExp ::= arithExp PLUS arithTerm 
            {
              ASTExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("+", e, t); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arithExp ::= arithExp MINUS arithTerm 
            {
              ASTExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("-", e, t); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arithExp ::= arithTerm 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = t; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arithTerm ::= arithTerm TIMES arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("*", t, f); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",10, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arithTerm ::= arithTerm DIV arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("/", t, f); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",10, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arithTerm ::= arithTerm MOD arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).right;
		ASTExp<AIRExp> t = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTBinaryExp<AIRExp>("%", t, f); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",10, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arithTerm ::= arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = f; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithTerm",10, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arithConstFactor ::= INTEGER 
            {
              ASTExp<AIRExp> RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new AIRExpInt(ilit); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",11, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arithConstFactor ::= FRACTION 
            {
              ASTExp<AIRExp> RESULT =null;
		int fracleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fracright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		Double frac = (Double)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new AIRExpFrac(frac); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",11, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arithConstFactor ::= LPAREN arithExp RPAREN 
            {
              ASTExp<AIRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).right;
		ASTExp<AIRExp> e = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)).value;
		 RESULT = e; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithConstFactor",11, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-2)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arithFactor ::= arithConstFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> cf = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = cf; 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",12, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arithFactor ::= VAR 
            {
              ASTExp<AIRExp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 RESULT = new ASTVar(var); 
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",12, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arithFactor ::= MINUS arithFactor 
            {
              ASTExp<AIRExp> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()).right;
		ASTExp<AIRExp> f = (ASTExp<AIRExp>)((java_cup.runtime.Symbol) CUP$HPLParser$stack.peek()).value;
		 
		      RESULT = new ASTUnaryExp<AIRExp>("-", f); 
		
              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("arithFactor",12, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.elementAt(CUP$HPLParser$top-1)), ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // empty ::= 
            {
              Object RESULT =null;

              CUP$HPLParser$result = parser.getSymbolFactory().newSymbol("empty",19, ((java_cup.runtime.Symbol)CUP$HPLParser$stack.peek()), RESULT);
            }
          return CUP$HPLParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$HPLParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$HPLParser$do_action(
    int                        CUP$HPLParser$act_num,
    java_cup.runtime.lr_parser CUP$HPLParser$parser,
    java.util.Stack            CUP$HPLParser$stack,
    int                        CUP$HPLParser$top)
    throws java.lang.Exception
    {
              return CUP$HPLParser$do_action_part00000000(
                               CUP$HPLParser$act_num,
                               CUP$HPLParser$parser,
                               CUP$HPLParser$stack,
                               CUP$HPLParser$top);
    }
}

}
